<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_treasure_room</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initiated = false;
treasure_room_x = x;
treasure_room_y = y;
width = sprite_width;
height = sprite_height;
    
spawner_list = ds_list_create();
removeList = ds_list_create();
initiated = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//loop all spawners


if(!initiated)
{
    with(obj_Spawner)
    {
        if(self.x &gt;= other.treasure_room_x &amp;&amp; self.x &lt;= (other.treasure_room_x + other.width))
        {
            if(self.y &gt;= other.treasure_room_y &amp;&amp; self.y &lt;= other.treasure_room_y + other.height)
            {
                ds_list_add(other.spawner_list, id);
                show_debug_message("added!");
            }
        }
    }
    initiated = true;
}

var i;
for (i = 0; i &lt; ds_list_size(spawner_list); i += 1)
{
    var probably_disabled = false;
    var spawner = ds_list_find_value(spawner_list, i);
    if (!instance_exists(spawner))
    {
        probably_disabled = true;
    }            
    instance_activate_object(spawner);
    if (!instance_exists(spawner))
    {
        ds_list_add(removeList, i);
    }
    else if (probably_disabled)
    {
        instance_deactivate_object(spawner);
    }
}
var z;
for(z = 0; z &lt; ds_list_size(removeList); z++)
{
     show_debug_message("Destroyed spawner!");
     ds_list_delete(spawner_list, ds_list_find_value(removeList, z));
}
ds_list_clear(removeList);

if(ds_list_empty(spawner_list))
{
    show_debug_message("REKT SON!");
    
    var number = irandom(99);
    if(number mod 10 &lt; 2)
    {
        instance_create(x + sprite_width / 2, y + sprite_height / 2, obj_temp_stats);
    }
    else if(number mod 10 &gt;= 2 &amp;&amp; number mod 10 &lt; 6)
    {
        var treasure = instance_create(x + sprite_width / 2, y + sprite_height / 2, obj_treasure_points);
        treasure.type = TREASURE_TYPE_ROOM;
    }
    else if(number mod 10 &gt;= 6)
    {
        var treasure = instance_create(x + sprite_width / 2, y + sprite_height / 2, obj_treasure_all);
        treasure.type = TREASURE_TYPE_ROOM;
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
